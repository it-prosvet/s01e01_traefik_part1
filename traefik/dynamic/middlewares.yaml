# adding HTTP routers
http:
  routers:
    secret-router:
      entryPoints:
        - web
      middlewares:
        - auth-demo
      service: api@internal
      rule: Host(`demo.local`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))

    sub-app-router:
      entryPoints:
        - web
      middlewares:
        - strip-prefix-demo
      service: app1
      rule: Host(`demo.local`) && PathPrefix(`/sub-app/`)

    custom-error-router:
      entryPoints:
        - web
      middlewares:
        - custom-error-page-demo
      rule: Host(`demo.local`)
      service: app1

    rate-limited-router:
      entryPoints:
        - web
      middlewares:
        - chain-demo
      rule: Host(`demo.local`) && Path(`/hello`)
      service: app1

    retry-router:
      entryPoints:
        - web
      middlewares:
        - retry-demo
      rule: Host(`demo.local`) && Path(`/failing`)
      service: app1
      
  # services definition
  services:
    app1:
      loadBalancer:
        servers:
          - url: http://localhost:3001

  middlewares:
    strip-prefix-demo:
      test-stripprefix:
      stripPrefix:
        prefixes:
          - "/sub-app"

    custom-error-page-demo:
      errors:
        status:
          - "404"
        service: app1
        query: "/not-found"

    # password can be generated using following command:
    # htpasswd -nb <user> <password>
    auth-demo:
      basicAuth:
        users:
          - "test:$apr1$BKw8oagc$4B1L1Nncg9DEnc5hgweTn/"  #test:test  

    chain-demo:
      chain:
        middlewares:
          - in-flight-demo
          - rate-limit-demo

    in-flight-demo:
      inFlightReq:
        amount: 5 # max number of concurent connections

    rate-limit-demo:
      rateLimit:
        average: 100
        burst: 200

    retry-demo:
      retry:
        attempts: 5

    circuit-breaker-demo:
      circuitBreaker:
        expression: "ResponseCodeRatio(500, 600, 0, 600) > 0.25"

